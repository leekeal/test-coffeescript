// Generated by CoffeeScript 1.6.3
(function() {
  var formidable, fs, queryString, show, url;

  queryString = require("querystring");

  fs = require("fs");

  formidable = require("formidable");

  url = require("url");

  /*　アップロードしたデータを処理する関数*/


  exports.index = function(response, request) {
    var form;
    if (request.method.toLowerCase() === 'post') {
      form = new formidable.IncomingForm();
      return form.parse(request, function(error, fields, files) {
        fs.renameSync(files.upload.path, "upload/" + files.upload.name);
        console.log(files.upload.name + "を保存しました");
        return show(response);
      });
    } else {
      return show(response);
    }
  };

  show = function(response) {
    var footer, header;
    header = '\
    <html　lang="ja">\
        <title>写真</title>\
        <head>\
            <meta http-equiv="Content-Type" content="text/html; charset=utf8" />\
            <meta name="viewport" content="width=device-width, initial-scale=1.0">\
            <link href="bootstrap/css/bootstrap.min.css" rel="stylesheet" media="screen">\
        </head>\
        <body>\
            <nav class="navbar navbar-inverse" role="navigation">\
                <div class="navbar-header">\
                    <a class="navbar-brand" href="#">写真</a>\
                </div>\
                <form action="/" method="post" enctype="multipart/form-data" class="navbar-form navbar-right" role="form">\
                    <div class="form-group">\
                        <input type="file" name="upload" id="upload">\
                    </div>\
                    <div class="form-group">\
                        <input type="submit" class="btn btn-primary" value="写真を追加" />\
                    </div>\
                </form>\
            </nav>\
    ';
    footer = '\
        </body>\
    </html>\
    ';
    response.writeHead(200, {
      "Content-Type": "text/html"
    });
    response.write(header);
    return fs.readdir("upload/", function(error, files) {
      var extension, file, _i, _len;
      if (error) {
        console.log("read dir error");
      } else {
        response.write('<div class="row">');
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          extension = file.match(/[^\.]+$/)[0].toLowerCase();
          if (extension === 'jpg' || extension === 'gif' || extension === 'jpeg') {
            response.write('<div class="col-xs-6 col-md-3">' + ("<img src='/image?filename=" + file + "' class='img-thumbnail'/>") + '</div>');
          }
        }
        response.write('</div>');
      }
      /*  
      因为nodejs是异步,如果不把response.end放在readdir里面,
      readdir执行后马上执行response.end, 就会导致循环里的输出不能写到response里面
      */

      response.write(footer);
      return response.end();
    });
  };

  exports.image = function(response, request) {
    var fileName, urlParsed;
    urlParsed = url.parse(request.url);
    fileName = queryString.parse(urlParsed.query).filename;
    return fs.readFile("upload/" + fileName, "binary", function(error, file) {
      if (error) {
        response.writeHead(500, {
          "Content-Type": "text/plain"
        });
        response.write(error + "\n");
        return response.end();
      } else {
        response.writeHead(200, {
          "Content-Type": "image/png"
        });
        response.write(file, "binary");
        return response.end();
      }
    });
  };

  exports.css = function(response, request) {
    var fileName, urlParsed;
    urlParsed = url.parse(request.url);
    fileName = queryString.parse(urlParsed.query).filename;
    return fs.readFile("bootstrap/css/bootstrap.min.css", "binary", function(error, file) {
      if (error) {
        response.writeHead(500, {
          "Content-Type": "text/plain"
        });
        response.write(error + "\n");
        return response.end();
      } else {
        response.writeHead(200, {
          "Content-Type": "text/css"
        });
        response.write(file, "binary");
        return response.end();
      }
    });
  };

}).call(this);
